

(define pi 3.14159265359)

(define (abs x)
  (cond [(< x 0) (- x)]
        [else x]))

(define (fib n)
  (fib-iter 1 0 n))

(define (fib-iter a b count)
  (cond
    [(eq? count 0) b]
    [else (fib-iter (+ a b) a (- count 1))]))


(define (sum term a next b)
  (define num (num-mux a +0 0 0.0))
  (cond
    [(> a b) num]
    [else (+ (term a) (sum term (next a) next b))]))


(define (inc n)
  (define num (num-mux n +1 1 1.0))
  (+ n num))

(define (identity x) x)

(define (sum-integers a b)
  (sum identity a inc b))


(define (pi-sum a b)
  (define (pi-term x)
    (/ 1.0 (* x (+ x 2.0))))
  (define (pi-next x)
    (+ x 4.0))
  (sum pi-term a pi-next b))


(define (last-pair lst)
  (cond
    [(pair? lst)
      (cond
        [(null? (cdr lst)) (car lst)]
        [else (last-pair (cdr lst))])]
    [else (error "is not pair")]))

(define (reverse lst)
  (cond
    [(pair? lst)
      (cond
        [(null? (cdr lst)) (list (car lst))]
        [else (cons (car lst) (reverse (cdr lst)))])]
    [else (error "is not list")]))