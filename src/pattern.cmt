
;;; matching example
;;; >>> (define temp (read "('macro args body)"))
;;; >>> (define src (read "(macro (a) a)"))
;;; >>> (define result (matching temp src))
;;; >>> result
;;;
;;;


(define (matching pat src)
  (define r (raw-matching pat src))
  (result-map (lambda (r) (filter (lambda (r) (ne? r nil)) r)) r))


(define (raw-matching pat src)
  (cond
    [(is-quote pat) (cons (get-quote pat) src)]
    [(is-pairs pat src) (matching-pair pat src)]
    [(eq? pat src) nil]
    [else 'err]))


(define (matching-pair pat src)
  (cond
    [(is-pairs pat src)
      (product-result-map
        (lambda () (raw-matching (car pat) (car src)))
        (lambda () (raw-matching (cdr pat) (cdr src))))]
    [else 'err]))


(define (is-list-end pat src)
  (and (null? (cdr pat)) (null? (cdr src))))


(define (is-pairs pat src)
  (and (pair? pat) (pair? src)))


(define (is-quote pat)
  (cond
    [(pair? pat) (eq? (car pat) 'quote)]
    [else false]))


(define (get-quote pat) (cadr pat))


(define (matching-test)
  (define pat (read "(macro 'name 'args 'body)"))
  (define src (read "(macro foo (a) (puts a))"))
  (matching pat src))


;; (list (pattern . callable)) -> [Result Value]
(define (match-map records src)
  (define mat-result (matching (caar records) src))
  (cond
    [(ne? mat-result 'err) ((cdar records) mat-result)]
    [(null? records) (err nil)]
    [else (match-map (cdr records) src)]))

