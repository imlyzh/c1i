
;;; matching example
;;; >>> (define temp (read "('macro args body)"))
;;; >>> (define src (read "(macro (a) a)"))
;;; >>> (define result (matching temp src))
;;; >>> result
;;;
;;;


(define (matching pattern src)
  (cond
    [(is-quote pattern) (cons (get-quote pattern) src)]
    [(is-pairs pattern src) (matching-pair pattern src)]
    [(eq? pattern src) nil]
    [else 'err]))


(define (matching-pair pattern src)
  (cond
    [(is-pairs pattern src) (result-map (matching (car pattern) (car src))
                                        (lambda (r) (result-map (matching (cdr pattern) (cdr src))
                                                                (lambda (r1) (cons r r1)))))]
    [else 'err]))


(define (is-pairs pat src)
  (and (pair? pat) (pair? src)))


(define (is-quote pattern)
  (cond
    [(pair? pattern) (eq? (car pattern) 'quote)]
    [else false]))


(define (get-quote pattern) (car (cdr pattern)))



(define (matching-test)
  (define temp (read "(macro 'name 'args 'body)"))
  (define src (read "(macro foo (a) (puts a))"))
  (define r (matching temp src))
  (filter (lambda (r) (ne? r nil)) r))

