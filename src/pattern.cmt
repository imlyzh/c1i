


;;; matching example
;;; >>> (define temp (read "('macro args body)"))
;;; >>> (define src (read "(macro (a) a)"))
;;; >>> (matching temp src)
;;; '('(args a) '(body . a))
;;;
(defun (matching pattern src)
    (cond
        [(sym? pattern) (cons (cons pattern src) nil)]
        [(and (is-quote? pattern) (sym? src))
            (cond
                [(eq? (car (cdr pattern)) src) nil]
                [else (error "pattern matching error")])]
        [(and (pair? pattern) (pair? src)) (matching-pair pattern src)]
        [(eq? pattern src) nil]
        [else (error "pattern matching error")]))


(defun (matching-pair pattern src)
    (cond
        [(and (pair? pattern) (pair? src))
            (let (
                [pcar (car pattern)]
                [pcdr (cdr pattern)]
                [scar (car src)]
                [scdr (cdr src)])
                (append (matching pcar scar) (matching-pair pcdr scdr)))]
        [else (matching pattern src)]))


(defun (is-quote? pattern)
    (cond
        [(pair? pattern)
            (cond
                [(and (eq? (car pattern) 'quote) (pair? (cdr pattern))) (sym? (car (cdr pattern)))]
                [else f])]
        [else f]))

