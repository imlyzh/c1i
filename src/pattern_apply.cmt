

;;; (apply-pattern (read "(macro ,args ,body*)") result)

(define (apply-template template pairs)
  (cond
    [(is-unquote? template) (strict-lookup pairs (car (cdr template)))]
    [(pair? template) (apply-pair template pairs)]
    [else template]))

(define (apply-pair template pairs)
  (cond
    [(pair? template)
      (let ([tcar (car template)]
            [tcdr (cdr template)])
        (cons (apply-template tcar pairs) (apply-template tcdr pairs)))]
    [else (apply-template template pairs)]))


;; is not supported nonsym in pattern matching
(define (is-unquote? pattern)
  (cond
    [(pair? pattern)
      (cond
        [(and (eq? (car pattern) 'unquote) (pair? (cdr pattern)))
          (sym? (car (cdr pattern)))]
        [else f])]
    [else f]))